



/* -------- Everything that is not your's bellow -------- */ 

// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media screen and (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
    }
  }

  @media screen and (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

/* -------- Inside borders -------- */

/// @Source https://codepen.io/ricardozea/pen/klems
/// Makes an inside borders via (box-shadow: inset â€¦ ;)
/// @author Ricardo Zea
/// With this mixin you can define 3 properties:
/// @param {int/float} $thickness
/// @param {mixed} $color
/// @param {int/float} $alpha
$_ib-defaults: (
  thickness : 2px,
  color     : black,
  alpha     : .1
) !default;

@mixin inside-border($values...) {
  $border-thickness: map-get($_ib-defaults, "thickness");
  $border-color: map-get($_ib-defaults, "color");
  $border-alpha: map-get($_ib-defaults, "alpha");

  @each $value in $values {
    @if type-of($value) == "number" {
      @if unitless($value) {
        $border-alpha: $value;
      } 
      
      @else {
        $border-thickness: $value;
      }
    } 
    
    @else if type-of($value) == "color" {
      $border-color: $value;
    }
    
    @else {
      @warn "Warning! Unexpected value: `#{$value}`.";
    }
  }
  
  box-shadow: inset 0 0 0 $border-thickness rgba($border-color, $border-alpha);
}

@mixin ib($values...) {
  @include inside-border($values...);
}
